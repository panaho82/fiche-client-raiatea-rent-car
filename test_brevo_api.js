/**
 * Test et diagnostic API Brevo pour RAIATEA RENT CAR
 * 
 * Ce script teste la configuration API Brevo avec diagnostic intelligent
 * des erreurs courantes et suggestions de r√©solution.
 * 
 * Usage:
 * node test_brevo_api.js
 */

require('dotenv').config();
const axios = require('axios');

class BrevoApiTester {
  constructor() {
    this.apiKey = process.env.BREVO_API_KEY;
    this.apiUrl = 'https://api.brevo.com/v3';
    this.defaultSender = {
      email: process.env.BREVO_VERIFIED_SENDER || process.env.EMAIL_TO || 'raiatearentcar@mail.pf',
      name: 'RAIATEA RENT CAR'
    };
    this.defaultRecipient = process.env.EMAIL_TO || 'raiatearentcar@mail.pf';
  }

  /**
   * Afficher le diagnostic de configuration
   */
  displayConfig() {
    console.log('='.repeat(60));
    console.log('üîç DIAGNOSTIC CONFIGURATION API BREVO');
    console.log('='.repeat(60));
    
    console.log('\nüìã Variables d\'environnement:');
    console.log('  BREVO_API_KEY:', this.apiKey ? 
      `‚úÖ D√©finie (${this.apiKey.substring(0, 10)}...)` : 
      '‚ùå Non d√©finie');
    console.log('  BREVO_VERIFIED_SENDER:', this.defaultSender.email);
    console.log('  EMAIL_TO:', this.defaultRecipient);
    
    console.log('\nüåê Configuration API:');
    console.log('  URL API:', this.apiUrl);
    console.log('  Exp√©diteur:', this.defaultSender.email);
    console.log('  Destinataire:', this.defaultRecipient);
    
    if (!this.apiKey) {
      console.log('\n‚ö†Ô∏è  PROBL√àME D√âTECT√â:');
      console.log('  La variable BREVO_API_KEY n\'est pas d√©finie.');
      console.log('\nüîß SOLUTION:');
      console.log('  1. Connectez-vous √† votre compte Brevo');
      console.log('  2. Allez dans SMTP & API > Cl√©s API');
      console.log('  3. Cr√©ez une nouvelle cl√© API');
      console.log('  4. Ajoutez BREVO_API_KEY=votre_cl√©_api dans votre .env');
      console.log('  5. Red√©marrez votre application');
      return false;
    }
    
    return true;
  }

  /**
   * Tester la connexion API
   */
  async testConnection() {
    try {
      console.log('\nüîÑ Test de connexion API Brevo...');
      
      const response = await axios.get(`${this.apiUrl}/account`, {
        headers: {
          'api-key': this.apiKey,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });
      
      console.log('‚úÖ Connexion API r√©ussie !');
      console.log('  Compte:', response.data.email || 'Non sp√©cifi√©');
      console.log('  Plan:', response.data.plan?.type || 'Non sp√©cifi√©');
      console.log('  Emails restants:', response.data.plan?.emailsRemaining || 'Non sp√©cifi√©');
      
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå Erreur de connexion API:');
      
      if (error.response) {
        console.error('  Status:', error.response.status);
        console.error('  Message:', error.response.data?.message || 'Erreur inconnue');
        
        // Diagnostic intelligent des erreurs
        if (error.response.status === 401) {
          console.log('\nüîß DIAGNOSTIC: Erreur d\'authentification');
          console.log('  Causes possibles:');
          console.log('  - Cl√© API invalide ou expir√©e');
          console.log('  - Cl√© API mal copi√©e (espaces, caract√®res manquants)');
          console.log('  - Compte Brevo suspendu');
          console.log('\nüí° SOLUTIONS:');
          console.log('  1. V√©rifiez votre cl√© API dans le dashboard Brevo');
          console.log('  2. R√©g√©n√©rez une nouvelle cl√© API si n√©cessaire');
          console.log('  3. V√©rifiez que votre compte Brevo est actif');
        } else if (error.response.status === 403) {
          console.log('\nüîß DIAGNOSTIC: Acc√®s refus√©');
          console.log('  Causes possibles:');
          console.log('  - Cl√© API avec permissions insuffisantes');
          console.log('  - Limite d\'utilisation atteinte');
          console.log('\nüí° SOLUTIONS:');
          console.log('  1. V√©rifiez les permissions de votre cl√© API');
          console.log('  2. Consultez votre quota d\'emails');
        } else if (error.response.status >= 500) {
          console.log('\nüîß DIAGNOSTIC: Erreur serveur Brevo');
          console.log('  Le service Brevo semble temporairement indisponible.');
          console.log('  R√©essayez dans quelques minutes.');
        }
      } else if (error.code === 'ECONNABORTED') {
        console.log('\nüîß DIAGNOSTIC: Timeout de connexion');
        console.log('  Votre connexion internet semble lente.');
        console.log('  V√©rifiez votre connexion et r√©essayez.');
      } else {
        console.error('  Erreur technique:', error.message);
      }
      
      return {
        success: false,
        error: error.response?.data || error.message
      };
    }
  }

  /**
   * Envoyer un email de test
   */
  async sendTestEmail() {
    try {
      console.log('\nüìß Envoi d\'un email de test...');
      
      const emailData = {
        sender: this.defaultSender,
        to: [
          {
            email: this.defaultRecipient,
            name: "RAIATEA RENT CAR"
          }
        ],
        subject: "üéâ Test API Brevo - Configuration r√©ussie !",
        htmlContent: `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
    .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; overflow: hidden; }
    .header { background: linear-gradient(135deg, #FFD700, #FFA500); padding: 20px; text-align: center; }
    .content { padding: 20px; }
    .success { background: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 20px 0; }
    .footer { background: #333; color: white; padding: 15px; text-align: center; font-size: 12px; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1 style="color: #000; margin: 0;">üöó RAIATEA RENT CAR</h1>
      <p style="color: #333; margin: 5px 0 0 0;">Test API Brevo r√©ussi !</p>
    </div>
    <div class="content">
      <h2>üéâ F√©licitations !</h2>
      <p>Votre configuration API Brevo fonctionne parfaitement !</p>
      
      <div class="success">
        <strong>‚úÖ Configuration valid√©e</strong><br>
        Votre syst√®me peut maintenant envoyer des emails via l'API Brevo, 
        plus fiable et plus rapide que SMTP !
      </div>
      
      <h3>üìä D√©tails du test:</h3>
      <ul>
        <li><strong>Date:</strong> ${new Date().toLocaleString('fr-FR')}</li>
        <li><strong>Exp√©diteur:</strong> ${this.defaultSender.email}</li>
        <li><strong>Destinataire:</strong> ${this.defaultRecipient}</li>
        <li><strong>M√©thode:</strong> API Brevo (recommand√©e)</li>
      </ul>
      
      <h3>üöÄ Prochaines √©tapes:</h3>
      <p>Votre formulaire client RAIATEA RENT CAR est maintenant pr√™t √† envoyer des emails professionnels avec pi√®ces jointes via l'API Brevo.</p>
    </div>
    <div class="footer">
      <p>Test automatique - API Brevo - RAIATEA RENT CAR<br>
         Syst√®me de gestion des fiches clients - Version API</p>
    </div>
  </div>
</body>
</html>`,
        textContent: `üéâ Test API Brevo - Configuration r√©ussie !

F√©licitations ! Votre configuration API Brevo fonctionne parfaitement !

‚úÖ Configuration valid√©e
Votre syst√®me peut maintenant envoyer des emails via l'API Brevo, 
plus fiable et plus rapide que SMTP !

üìä D√©tails du test:
- Date: ${new Date().toLocaleString('fr-FR')}
- Exp√©diteur: ${this.defaultSender.email}
- Destinataire: ${this.defaultRecipient}
- M√©thode: API Brevo (recommand√©e)

üöÄ Prochaines √©tapes:
Votre formulaire client RAIATEA RENT CAR est maintenant pr√™t √† envoyer 
des emails professionnels avec pi√®ces jointes via l'API Brevo.

RAIATEA RENT CAR - Syst√®me de gestion des fiches clients - Version API`,
        attachment: [
          {
            name: "test_api_brevo_diagnostic.txt",
            content: Buffer.from(`Test API Brevo - Configuration valid√©e !

Date: ${new Date().toLocaleString('fr-FR')}
Exp√©diteur: ${this.defaultSender.email}
Destinataire: ${this.defaultRecipient}
M√©thode: API Brevo

‚úÖ Toutes les v√©rifications sont pass√©es avec succ√®s !
üöÄ Votre syst√®me d'emails est op√©rationnel.

Configuration test√©e:
- Connexion API: OK
- Authentification: OK
- Envoi d'email: OK
- Pi√®ces jointes: OK

RAIATEA RENT CAR
Syst√®me de gestion des fiches clients - Version API optimis√©e`).toString('base64')
          }
        ]
      };

      console.log('  Exp√©diteur:', this.defaultSender.email);
      console.log('  Destinataire:', this.defaultRecipient);
      
      const response = await axios.post(`${this.apiUrl}/smtp/email`, emailData, {
        headers: {
          'api-key': this.apiKey,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });

      console.log('‚úÖ Email de test envoy√© avec succ√®s !');
      console.log('  Message ID:', response.data.messageId);
      console.log('  Status:', 'Envoy√©');
      
      return {
        success: true,
        messageId: response.data.messageId,
        data: response.data
      };

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi du test:');
      
      if (error.response) {
        console.error('  Status:', error.response.status);
        console.error('  Message:', error.response.data?.message || 'Erreur inconnue');
        
        // Diagnostic des erreurs d'envoi
        if (error.response.status === 400) {
          console.log('\nüîß DIAGNOSTIC: Erreur de donn√©es');
          console.log('  Causes possibles:');
          console.log('  - Adresse email exp√©diteur non v√©rifi√©e');
          console.log('  - Format d\'email invalide');
          console.log('  - Donn√©es manquantes');
          console.log('\nüí° SOLUTIONS:');
          console.log('  1. V√©rifiez l\'adresse exp√©diteur dans Brevo');
          console.log('  2. Ajoutez et v√©rifiez votre domaine');
          console.log('  3. Utilisez une adresse email valide');
        } else if (error.response.status === 402) {
          console.log('\nüîß DIAGNOSTIC: Quota d\'emails atteint');
          console.log('  Votre quota d\'emails gratuits est √©puis√©.');
          console.log('\nüí° SOLUTIONS:');
          console.log('  1. Attendez le renouvellement mensuel');
          console.log('  2. Ou passez √† un plan payant Brevo');
        }
      } else {
        console.error('  Erreur technique:', error.message);
      }
      
      return {
        success: false,
        error: error.response?.data || error.message
      };
    }
  }

  /**
   * Ex√©cuter tous les tests
   */
  async runAllTests() {
    console.log('üöÄ D√âBUT DES TESTS API BREVO');
    console.log('Timestamp:', new Date().toLocaleString('fr-FR'));
    
    // 1. Afficher la configuration
    const configOk = this.displayConfig();
    if (!configOk) {
      console.log('\n‚ùå √âCHEC: Configuration incompl√®te');
      return false;
    }
    
    // 2. Test de connexion
    const connectionResult = await this.testConnection();
    if (!connectionResult.success) {
      console.log('\n‚ùå √âCHEC: Impossible de se connecter √† l\'API Brevo');
      return false;
    }
    
    // 3. Test d'envoi d'email
    const emailResult = await this.sendTestEmail();
    if (!emailResult.success) {
      console.log('\n‚ùå √âCHEC: Impossible d\'envoyer l\'email de test');
      return false;
    }
    
    // Succ√®s complet
    console.log('\n' + '='.repeat(60));
    console.log('üéâ TOUS LES TESTS R√âUSSIS !');
    console.log('='.repeat(60));
    console.log('\n‚úÖ Votre configuration API Brevo est parfaitement op√©rationnelle !');
    console.log('‚úÖ Vos emails seront envoy√©s via l\'API Brevo (plus fiable que SMTP)');
    console.log('‚úÖ Consultez votre bo√Æte email pour voir le message de test');
    
    console.log('\nüöÄ PROCHAINES √âTAPES:');
    console.log('  1. Votre formulaire client est pr√™t √† l\'emploi');
    console.log('  2. Les emails seront envoy√©s automatiquement');
    console.log('  3. Surveillez votre quota dans le dashboard Brevo');
    
    console.log('\nüìä AVANTAGES API BREVO:');
    console.log('  ‚Ä¢ Plus fiable que SMTP');
    console.log('  ‚Ä¢ Gestion automatique des erreurs');
    console.log('  ‚Ä¢ Statistiques d\'envoi d√©taill√©es');
    console.log('  ‚Ä¢ Support des pi√®ces jointes');
    console.log('  ‚Ä¢ Fallback automatique vers SMTP si n√©cessaire');
    
    return true;
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  const tester = new BrevoApiTester();
  tester.runAllTests()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('\nüí• ERREUR CRITIQUE:', error);
      process.exit(1);
    });
}

module.exports = BrevoApiTester; 